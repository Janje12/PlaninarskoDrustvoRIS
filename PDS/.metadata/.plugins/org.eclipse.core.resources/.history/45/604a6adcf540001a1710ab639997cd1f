package com.pds.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	@Autowired
	@Qualifier("customUserDetailsService")
	private UserDetailsService userDetailsService;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());

	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
		.csrf().disable()
		.authorizeRequests()
		.antMatchers("/images/**", "/auth/**").permitAll()
		.antMatchers("/Izvestaj/**", "/Komentar/**", "/Korisnik/**"
				,"/Planina/**", "/PlaninarskiDom/**", "/Rezervacija/**", "/Slika/**", "/Staza/**", "/Uloga/**", "/Znamenitost/**")
		.hasAnyRole("planinar", "sekretar")
		.antMatchers("/auth").hasRole("sekretar")
		.and()
		.formLogin()
		.loginPage("/auth/login")
		.permitAll()
		.loginProcessingUrl("/login")
		.defaultSuccessUrl("/index.jsp")
		.and()
		.logout()
		.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
		.logoutSuccessUrl("/index.jsp")
		.permitAll();
	}
		
}
